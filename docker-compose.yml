services:
  # Fraud Detection API Service
  fraud-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fraud-detection-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./monitoring_data:/app/monitoring_data
    networks:
      - fraud-detection-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fraud-api.rule=Host(`api.fraud-detection.local`)"
      - "traefik.http.services.fraud-api.loadbalancer.server.port=8000"

  # Fraud Detection Dashboard Service
  fraud-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: fraud-detection-dashboard
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
      - ./reports:/app/reports
      - ./monitoring_data:/app/monitoring_data
    networks:
      - fraud-detection-network
    restart: unless-stopped
    command: ["streamlit", "run", "run_dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fraud-dashboard.rule=Host(`dashboard.fraud-detection.local`)"
      - "traefik.http.services.fraud-dashboard.loadbalancer.server.port=8501"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: fraud-detection-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fraud-detection-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: fraud-detection-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - fraud-detection-network
    restart: unless-stopped
    depends_on:
      - fraud-api
      - fraud-dashboard
    profiles:
      - nginx

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud-detection-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fraud-detection-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fraud-detection-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - fraud-detection-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  fraud-detection-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16